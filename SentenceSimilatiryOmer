import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.util.List;

import org.supercsv.io.CsvListWriter;
import org.supercsv.io.ICsvListWriter;
import org.supercsv.prefs.CsvPreference;


//https://github.com/super-csv/super-csv/releases

public class SentenceSimilairtyOmer {
	
	static String baseInitialFilesPath = "C:\\Users\\Omer\\Documents\\TeamProject\\InitialData";
	static String baseFinalResultBasePath = "C:\\Users\\Omer\\Documents\\TeamProject\\omerResultSentenceMatrixSimilarityFiles";
	
	//for Reading CSV
	public static ArrayList<List<String>> csvData= new ArrayList<List<String>>();//data in columns in csv
	
	
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		/**
		 *  open file
		 *  read all phrases (first column from CSV)
		 *  Lematize
		 *  compute semantic similarity between once phrase and rest
		 *  compute syntatic similairty beween one phrase and rest
		 *  give each score weightae
		 *  Compute similarity matrix for each sentence
		 *  Save similatrity matrix
		 *  repeat for another file
		 * */
		
		//read All files
		File file = new File(baseInitialFilesPath);
		for(String fileIterator : file.list()){
			
			ArrayList<String> sentences = phrasesFromFile(baseInitialFilesPath+"\\"+fileIterator);
			 // Compute similarity between all sentences in this file and then save them as similarity Matrix
			try {
				String SimilarityMatrix[][] = new String[sentences.size()] [sentences.size()];
				for(int i=0; i<sentences.size(); i++){
					for(int j=0; j<sentences.size(); j++){
						SimilarityMatrix[i][j] = Double.toString(computeOmerAlgoSentenceSimilarity(sentences.get(i),sentences.get(j)));
					}
				}	
				//save similatiry Matrix
				saveSentenceSimilarityMatrix(SimilarityMatrix, fileIterator);
			} catch (IndexOutOfBoundsException e) {
			    System.err.println("IndexOutOfBoundsException: " + e.getMessage());
			}
			
			//for testing only
			break;
		}

	}
	
	/**
	 * Read Phrases From Files
	 * */
	public static  ArrayList<String> phrasesFromFile(String path){
		String csvFile = path;//"C:\\Users\\Àëåêñàíäðà\\Desktop\\Mannheim\\2s\\teampr\\Clustered Questions\\Topic 1-Q1.csv";
    	BufferedReader input = null;
		ArrayList<String> phrasesToSend = new ArrayList<String>();
		try 
		{
		    input =  new BufferedReader(new FileReader(csvFile));
		    String line = null; boolean firstLine = true;
		    while (( line = input.readLine()) != null){  
		    	if(!firstLine){
		    		String [] data = line.split("\\|");// change it to | instead of ;
		    			csvData.add(Arrays.asList(data));
		    		}
		    else{
		    	firstLine = false;
		    }
		  }
		}
		catch (Exception ex){
		      ex.printStackTrace();
		}
		finally {
		    if(input != null){
		    	try {
		    		input.close();
		    		} 
		    	catch (IOException e) {
		    		e.printStackTrace();
		    	}
		    }
		}
		
		for (int i=0;i<csvData.size();i++){
			phrasesToSend.add((csvData.get(i)).get(0));
		}
		
		for(int i=0; i>phrasesToSend.size(); i++){
			System.out.println(phrasesToSend.get(i));
		}
		
		return phrasesToSend;
	}
	
	
	/**
	 * Compute Semantic Similarity of Sentence
	 * */
	public static double computeSimilarityBetweenWords(String word1,String word2){
		
		return 0;
	}
	
	/**
	 * Compute Semantic Similarity of Sentence
	 * */
	public static double computeOmerAlgoSentenceSimilarity(String phrase1, String phrase2){
		return (0.5*computeSentenceSemanticsSimilarity(phrase1,phrase2)) + (0.5*computeSentenceSyntaticSimilarity(phrase1,phrase2));
	}
	
	
	/**
	 * Compute Semantic Similarity of Sentence
	 * */
	@SuppressWarnings("null")
	public static double computeSentenceSemanticsSimilarity(String phrase1, String phrase2){
		/**
		 * Lematize
		 * Compute Union
		 * 
		 * */
		
		String _phrase1 = phrase1;
		String _phrase2 = phrase2;
		
		String _phrase1Array[] = _phrase1.split(" ");
		String _phrase2Array[] = _phrase2.split(" ");
		
		String combinedString = new String(_phrase1+" "+_phrase2);
		
		String[] wordsArrayList = combinedString.split(" ");
		
		//Set of words
		//lexical semantic vector
		Set<String> wordsSet = new HashSet<String>(Arrays.asList(wordsArrayList));
		
		/**
		 * Algorithm
		 * For each word that exist in the in the wordset if it exist in the sentence(T1 or T2) we set
		 * it to 1 or else we set it to similarity(we calculate similarity value using word2vec,wordnet or any other source) value
		 * Remember the vector would be calculated based on the big vector 
		 * */
		
		//initialize it with size of semantic Vector size
		double sentenceVector1[] = new double[wordsSet.size()];
		double sentenceVector2[] = new double[wordsSet.size()];
		
		
		//sentence vector for phrase1
		int i=0;
		for(String wordToCompare : wordsSet){
			//check if the word exist in the _pharse1 Array
			List<String> phraseArrayList = new ArrayList<String>(Arrays.asList(_phrase1Array));
			if(phraseArrayList.contains(wordToCompare)){
				//set value to 1 as word is exactly contained in the list
				sentenceVector1[i] = 1;
			}else{
				//set the word to maximum similarity
				double maximumSimilarity = 0;
				for(String wordInPhraseList : phraseArrayList){
					if(computeSimilarityBetweenWords(wordToCompare,wordInPhraseList) > maximumSimilarity){
						maximumSimilarity = computeSimilarityBetweenWords(wordToCompare,wordInPhraseList); 
					}
				}
				//assign the sentence vector maximum similarity score
				sentenceVector1[i] = maximumSimilarity;
			}
			
			//check if the word exist in the _pharse2 Array
			List<String> phraseArrayList2 = new ArrayList<String>(Arrays.asList(_phrase2Array));
			if(phraseArrayList2.contains(wordToCompare)){
				//set value to 1 as word is exactly contained in the list
				sentenceVector2[i] = 1;
			}else{
				//set the word to maximum similarity
				double maximumSimilarity = 0;
				for(String wordInPhraseList : phraseArrayList2){
					if(computeSimilarityBetweenWords(wordToCompare,wordInPhraseList) > maximumSimilarity){
						maximumSimilarity = computeSimilarityBetweenWords(wordToCompare,wordInPhraseList); 
					}
				}
				//assign the sentence vector maximum similarity score
				sentenceVector2[i] = maximumSimilarity;
			}
			
		}
		
		//compute cosine distance between two vector
		return cosineSimilarity(sentenceVector1, sentenceVector2);
	}
	
	
	/**
	 * Compute Cosine Similarity of Sentence
	 * http://computergodzilla.blogspot.de/2013/07/how-to-calculate-tf-idf-of-document.html
	 * */
	 public static double cosineSimilarity(double[] matrix1, double[] matrix2) {
	        double dotProduct = 0.0;
	        double magnitude1 = 0.0;
	        double magnitude2 = 0.0;
	        double cosineSimilarity = 0.0;

	        for (int i = 0; i < matrix1.length; i++) //docVector1 and docVector2 must be of same length
	        {
	            dotProduct += matrix1[i] * matrix2[i];  //a.b
	            magnitude1 += Math.pow(matrix1[i], 2);  //(a^2)
	            magnitude2 += Math.pow(matrix2[i], 2); //(b^2)
	        }

	        magnitude1 = Math.sqrt(magnitude1);//sqrt(a^2)
	        magnitude2 = Math.sqrt(magnitude2);//sqrt(b^2)

	        if (magnitude1 != 0.0 | magnitude2 != 0.0) {
	            cosineSimilarity = dotProduct / (magnitude1 * magnitude2);
	        } else {
	            return 0.0;
	        }
	        return cosineSimilarity;
	  }
	
	/**
	 * Compute Syntatic Similarity of Sentence
	 * */
	public static double computeSentenceSyntaticSimilarity(String phrase1, String phrase2){
		
		return 0;
	}
	
	
	/**
	 * Save Sentence Similarity matrix
	 * */
	public static void saveSentenceSimilarityMatrix(String matrix[][],String fileName){
		
		ICsvListWriter csvWriter = null;
        try {
            csvWriter = new CsvListWriter(new FileWriter(baseFinalResultBasePath+"\\"+"result"+fileName+".csv"), 
                CsvPreference.STANDARD_PREFERENCE);

            for (int i = 0; i < matrix.length; i++) {
                csvWriter.write(matrix[i]);
            }

        } catch (IOException e) {
            e.printStackTrace(); // TODO handle exception properly
        } finally {
            try {
                csvWriter.close();
            } catch (IOException e) {
            }
        }

    }
		
}


